{"version":3,"sources":["../../../../../modules/@angular/platform-browser/src/browser/meta.ts"],"names":[],"mappings":"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","file":"meta.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {DomAdapter} from '../dom/dom_adapter';\n\n/**\n * Represents a meta element.\n *\n * @experimental\n */\nexport type MetaDefinition = {\n  charset?: string; content?: string; httpEquiv?: string; id?: string; itemprop?: string;\n  name?: string;\n  property?: string;\n  scheme?: string;\n  url?: string;\n} &\n{\n  // TODO(IgorMinar): this type looks wrong\n  [prop: string]: string;\n};\n/**\n * A service that can be used to get and add meta tags.\n * \n * \\@experimental\n */\nexport class Meta {\n/**\n * @param {?} _dom\n */\nconstructor(private _dom: DomAdapter) {}\n/**\n * @param {?} tag\n * @param {?=} forceCreation\n * @return {?}\n */\naddTag(tag: MetaDefinition, forceCreation: boolean = false): HTMLMetaElement {\n    if (!tag) return null;\n    return this._getOrCreateElement(tag, forceCreation);\n  }\n/**\n * @param {?} tags\n * @param {?=} forceCreation\n * @return {?}\n */\naddTags(tags: MetaDefinition[], forceCreation: boolean = false): HTMLMetaElement[] {\n    if (!tags) return [];\n    return tags.reduce((result: HTMLMetaElement[], tag: MetaDefinition) => {\n      if (tag) {\n        result.push(this._getOrCreateElement(tag, forceCreation));\n      }\n      return result;\n    }, []);\n  }\n/**\n * @param {?} attrSelector\n * @return {?}\n */\ngetTag(attrSelector: string): HTMLMetaElement {\n    if (!attrSelector) return null;\n    return this._dom.query(`meta[${attrSelector}]`);\n  }\n/**\n * @param {?} attrSelector\n * @return {?}\n */\ngetTags(attrSelector: string): HTMLMetaElement[] {\n    if (!attrSelector) return [];\n    const /** @type {?} */ list /*NodeList*/ =\n        this._dom.querySelectorAll(this._dom.defaultDoc(), `meta[${attrSelector}]`);\n    return list ? [].slice.call(list) : [];\n  }\n/**\n * @param {?} tag\n * @param {?=} selector\n * @return {?}\n */\nupdateTag(tag: MetaDefinition, selector?: string): HTMLMetaElement {\n    if (!tag) return null;\n    selector = selector || this._parseSelector(tag);\n    const /** @type {?} */ meta: HTMLMetaElement = this.getTag(selector);\n    if (meta) {\n      return this._setMetaElementAttributes(tag, meta);\n    }\n    return this._getOrCreateElement(tag, true);\n  }\n/**\n * @param {?} attrSelector\n * @return {?}\n */\nremoveTag(attrSelector: string): void { this.removeTagElement(this.getTag(attrSelector)); }\n/**\n * @param {?} meta\n * @return {?}\n */\nremoveTagElement(meta: HTMLMetaElement): void {\n    if (meta) {\n      this._dom.remove(meta);\n    }\n  }\n/**\n * @param {?} meta\n * @param {?=} forceCreation\n * @return {?}\n */\nprivate _getOrCreateElement(meta: MetaDefinition, forceCreation: boolean = false):\n      HTMLMetaElement {\n    if (!forceCreation) {\n      const /** @type {?} */ selector: string = this._parseSelector(meta);\n      const /** @type {?} */ elem: HTMLMetaElement = this.getTag(selector);\n      // It's allowed to have multiple elements with the same name so it's not enough to\n      // just check that element with the same name already present on the page. We also need to\n      // check if element has tag attributes\n      if (elem && this._containsAttributes(meta, elem)) return elem;\n    }\n    const /** @type {?} */ element: HTMLMetaElement = /** @type {?} */(( this._dom.createElement('meta') as HTMLMetaElement));\n    this._setMetaElementAttributes(meta, element);\n    const /** @type {?} */ head = this._dom.getElementsByTagName(this._dom.defaultDoc(), 'head')[0];\n    this._dom.appendChild(head, element);\n    return element;\n  }\n/**\n * @param {?} tag\n * @param {?} el\n * @return {?}\n */\nprivate _setMetaElementAttributes(tag: MetaDefinition, el: HTMLMetaElement): HTMLMetaElement {\n    Object.keys(tag).forEach((prop: string) => this._dom.setAttribute(el, prop, tag[prop]));\n    return el;\n  }\n/**\n * @param {?} tag\n * @return {?}\n */\nprivate _parseSelector(tag: MetaDefinition): string {\n    const /** @type {?} */ attr: string = tag.name ? 'name' : 'property';\n    return `${attr}=\"${tag[attr]}\"`;\n  }\n/**\n * @param {?} tag\n * @param {?} elem\n * @return {?}\n */\nprivate _containsAttributes(tag: MetaDefinition, elem: HTMLMetaElement): boolean {\n    return Object.keys(tag).every((key: string) => this._dom.getAttribute(elem, key) === tag[key]);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DomAdapter, },\n];\n}\n\nfunction Meta_tsickle_Closure_declarations() {\n/** @type {?} */\nMeta.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMeta.ctorParameters;\n/** @type {?} */\nMeta.prototype._dom;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}