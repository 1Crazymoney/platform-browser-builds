{"version":3,"sources":["../../../../../../modules/@angular/platform-browser/src/dom/events/key_events.ts"],"names":[],"mappings":"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","file":"key_events.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, NgZone} from '@angular/core/index';\nimport {getDOM} from '../dom_adapter';\nimport {EventManagerPlugin} from './event_manager';\n\nconst /** @type {?} */ MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];\nconst /** @type {?} */ MODIFIER_KEY_GETTERS: {[key: string]: (event: KeyboardEvent) => boolean} = {\n  'alt': (event: KeyboardEvent) => event.altKey,\n  'control': (event: KeyboardEvent) => event.ctrlKey,\n  'meta': (event: KeyboardEvent) => event.metaKey,\n  'shift': (event: KeyboardEvent) => event.shiftKey\n};\n/**\n * \\@experimental\n */\nexport class KeyEventsPlugin extends EventManagerPlugin {\nconstructor() { super(); }\n/**\n * @param {?} eventName\n * @return {?}\n */\nsupports(eventName: string): boolean { return KeyEventsPlugin.parseEventName(eventName) != null; }\n/**\n * @param {?} element\n * @param {?} eventName\n * @param {?} handler\n * @return {?}\n */\naddEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const /** @type {?} */ parsedEvent = KeyEventsPlugin.parseEventName(eventName);\n\n    const /** @type {?} */ outsideHandler =\n        KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());\n\n    return this.manager.getZone().runOutsideAngular(() => {\n      return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);\n    });\n  }\n/**\n * @param {?} eventName\n * @return {?}\n */\nstatic parseEventName(eventName: string): {[key: string]: string} {\n    const /** @type {?} */ parts: string[] = eventName.toLowerCase().split('.');\n\n    const /** @type {?} */ domEventName = parts.shift();\n    if ((parts.length === 0) || !(domEventName === 'keydown' || domEventName === 'keyup')) {\n      return null;\n    }\n\n    const /** @type {?} */ key = KeyEventsPlugin._normalizeKey(parts.pop());\n\n    let /** @type {?} */ fullKey = '';\n    MODIFIER_KEYS.forEach(modifierName => {\n      const /** @type {?} */ index: number = parts.indexOf(modifierName);\n      if (index > -1) {\n        parts.splice(index, 1);\n        fullKey += modifierName + '.';\n      }\n    });\n    fullKey += key;\n\n    if (parts.length != 0 || key.length === 0) {\n      // returning null instead of throwing to let another plugin process the event\n      return null;\n    }\n\n    const /** @type {?} */ result: {[k: string]: string} = {};\n    result['domEventName'] = domEventName;\n    result['fullKey'] = fullKey;\n    return result;\n  }\n/**\n * @param {?} event\n * @return {?}\n */\nstatic getEventFullKey(event: KeyboardEvent): string {\n    let /** @type {?} */ fullKey = '';\n    let /** @type {?} */ key = getDOM().getEventKey(event);\n    key = key.toLowerCase();\n    if (key === ' ') {\n      key = 'space';  // for readability\n    } else if (key === '.') {\n      key = 'dot';  // because '.' is used as a separator in event names\n    }\n    MODIFIER_KEYS.forEach(modifierName => {\n      if (modifierName != key) {\n        const /** @type {?} */ modifierGetter = MODIFIER_KEY_GETTERS[modifierName];\n        if (modifierGetter(event)) {\n          fullKey += modifierName + '.';\n        }\n      }\n    });\n    fullKey += key;\n    return fullKey;\n  }\n/**\n * @param {?} fullKey\n * @param {?} handler\n * @param {?} zone\n * @return {?}\n */\nstatic eventCallback(fullKey: any, handler: Function, zone: NgZone): Function {\n    return (event: any /** TODO #9100 */) => {\n      if (KeyEventsPlugin.getEventFullKey(event) === fullKey) {\n        zone.runGuarded(() => handler(event));\n      }\n    };\n  }\n/**\n * \\@internal\n * @param {?} keyName\n * @return {?}\n */\nstatic _normalizeKey(keyName: string): string {\n    // TODO: switch to a Map if the mapping grows too much\n    switch (keyName) {\n      case 'esc':\n        return 'escape';\n      default:\n        return keyName;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction KeyEventsPlugin_tsickle_Closure_declarations() {\n/** @type {?} */\nKeyEventsPlugin.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nKeyEventsPlugin.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}