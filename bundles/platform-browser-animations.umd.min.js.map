{"version":3,"file":"platform-browser-animations.umd.min.js","sources":["../../../../packages/platform-browser/animations/src/animation_renderer.ts","../../../../packages/platform-browser/animations/src/providers.ts","../../../../packages/platform-browser/animations/src/animation_builder.ts","../../../../packages/platform-browser/animations/src/module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationTriggerMetadata} from '@angular/animations';\nimport {ÉµAnimationEngine as AnimationEngine} from '@angular/animations/browser';\nimport {Injectable, NgZone, Renderer2, RendererFactory2, RendererStyleFlags2, RendererType2} from '@angular/core';\nexport class AnimationRendererFactory implements RendererFactory2 {\nprivate _currentId: number = 0;\n/**\n * @param {?} delegate\n * @param {?} _engine\n * @param {?} _zone\n */\nconstructor(\nprivate delegate: RendererFactory2,\nprivate _engine: AnimationEngine,\nprivate _zone: NgZone) {\n    _engine.onRemovalComplete = (element: any, delegate: any) => {\n      // Note: if an component element has a leave animation, and the component\n      // a host leave animation, the view engine will call `removeChild` for the parent\n      // component renderer as well as for the child component renderer.\n      // Therefore, we need to check if we already removed the element.\n      if (delegate && delegate.parentNode(element)) {\n        delegate.removeChild(element.parentNode, element);\n      }\n    };\n  }\n/**\n * @param {?} hostElement\n * @param {?} type\n * @return {?}\n */\ncreateRenderer(hostElement: any, type: RendererType2): Renderer2 {\n    let /** @type {?} */ delegate = this.delegate.createRenderer(hostElement, type);\n    if (!hostElement || !type || !type.data || !type.data['animation']) return delegate;\n\n    const /** @type {?} */ componentId = type.id;\n    const /** @type {?} */ namespaceId = type.id + '-' + this._currentId;\n    this._currentId++;\n\n    const /** @type {?} */ animationTriggers = /** @type {?} */(( type.data['animation'] as AnimationTriggerMetadata[]));\n    animationTriggers.forEach(\n        trigger => this._engine.registerTrigger(\n            componentId, namespaceId, hostElement, trigger.name, trigger));\n    return new AnimationRenderer(delegate, this._engine, this._zone, namespaceId);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: RendererFactory2, },\n{type: AnimationEngine, },\n{type: NgZone, },\n];\n}\n\nfunction AnimationRendererFactory_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationRendererFactory.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAnimationRendererFactory.ctorParameters;\n/** @type {?} */\nAnimationRendererFactory.prototype._currentId;\n/** @type {?} */\nAnimationRendererFactory.prototype.delegate;\n/** @type {?} */\nAnimationRendererFactory.prototype._engine;\n/** @type {?} */\nAnimationRendererFactory.prototype._zone;\n}\n\nexport class AnimationRenderer implements Renderer2 {\npublic destroyNode: (node: any) => (void|any) = null;\nprivate _flushPending: boolean = false;\n/**\n * @param {?} delegate\n * @param {?} _engine\n * @param {?} _zone\n * @param {?} _namespaceId\n */\nconstructor(\npublic delegate: Renderer2,\nprivate _engine: AnimationEngine,\nprivate _zone: NgZone,\nprivate _namespaceId: string) {\n    this.destroyNode = this.delegate.destroyNode ? (n) => delegate.destroyNode(n) : null;\n  }\n/**\n * @return {?}\n */\nget data() { return this.delegate.data; }\n/**\n * @return {?}\n */\ndestroy(): void {\n    this._engine.destroy(this._namespaceId, this.delegate);\n    this.delegate.destroy();\n  }\n/**\n * @param {?} name\n * @param {?=} namespace\n * @return {?}\n */\ncreateElement(name: string, namespace?: string): any {\n    return this.delegate.createElement(name, namespace);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\ncreateComment(value: string): any { return this.delegate.createComment(value); }\n/**\n * @param {?} value\n * @return {?}\n */\ncreateText(value: string): any { return this.delegate.createText(value); }\n/**\n * @param {?} selectorOrNode\n * @return {?}\n */\nselectRootElement(selectorOrNode: string|any): any {\n    return this.delegate.selectRootElement(selectorOrNode);\n  }\n/**\n * @param {?} node\n * @return {?}\n */\nparentNode(node: any): any { return this.delegate.parentNode(node); }\n/**\n * @param {?} node\n * @return {?}\n */\nnextSibling(node: any): any { return this.delegate.nextSibling(node); }\n/**\n * @param {?} el\n * @param {?} name\n * @param {?} value\n * @param {?=} namespace\n * @return {?}\n */\nsetAttribute(el: any, name: string, value: string, namespace?: string): void {\n    this.delegate.setAttribute(el, name, value, namespace);\n  }\n/**\n * @param {?} el\n * @param {?} name\n * @param {?=} namespace\n * @return {?}\n */\nremoveAttribute(el: any, name: string, namespace?: string): void {\n    this.delegate.removeAttribute(el, name, namespace);\n  }\n/**\n * @param {?} el\n * @param {?} name\n * @return {?}\n */\naddClass(el: any, name: string): void { this.delegate.addClass(el, name); }\n/**\n * @param {?} el\n * @param {?} name\n * @return {?}\n */\nremoveClass(el: any, name: string): void { this.delegate.removeClass(el, name); }\n/**\n * @param {?} el\n * @param {?} style\n * @param {?} value\n * @param {?} flags\n * @return {?}\n */\nsetStyle(el: any, style: string, value: any, flags: RendererStyleFlags2): void {\n    this.delegate.setStyle(el, style, value, flags);\n  }\n/**\n * @param {?} el\n * @param {?} style\n * @param {?} flags\n * @return {?}\n */\nremoveStyle(el: any, style: string, flags: RendererStyleFlags2): void {\n    this.delegate.removeStyle(el, style, flags);\n  }\n/**\n * @param {?} node\n * @param {?} value\n * @return {?}\n */\nsetValue(node: any, value: string): void { this.delegate.setValue(node, value); }\n/**\n * @param {?} parent\n * @param {?} newChild\n * @return {?}\n */\nappendChild(parent: any, newChild: any): void {\n    this.delegate.appendChild(parent, newChild);\n    this._engine.onInsert(this._namespaceId, newChild, parent, false);\n    this._queueFlush();\n  }\n/**\n * @param {?} parent\n * @param {?} newChild\n * @param {?} refChild\n * @return {?}\n */\ninsertBefore(parent: any, newChild: any, refChild: any): void {\n    this.delegate.insertBefore(parent, newChild, refChild);\n    this._engine.onInsert(this._namespaceId, newChild, parent, true);\n    this._queueFlush();\n  }\n/**\n * @param {?} parent\n * @param {?} oldChild\n * @return {?}\n */\nremoveChild(parent: any, oldChild: any): void {\n    this._engine.onRemove(this._namespaceId, oldChild, this.delegate);\n    this._queueFlush();\n  }\n/**\n * @param {?} el\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nsetProperty(el: any, name: string, value: any): void {\n    if (name.charAt(0) == '@') {\n      name = name.substr(1);\n      const /** @type {?} */ doFlush = this._engine.setProperty(this._namespaceId, el, name, value);\n      if (doFlush) {\n        this._queueFlush();\n      }\n    } else {\n      this.delegate.setProperty(el, name, value);\n    }\n  }\n/**\n * @param {?} target\n * @param {?} eventName\n * @param {?} callback\n * @return {?}\n */\nlisten(target: 'window'|'document'|'body'|any, eventName: string, callback: (event: any) => any):\n      () => void {\n    if (eventName.charAt(0) == '@') {\n      const /** @type {?} */ element = resolveElementFromTarget(target);\n      let /** @type {?} */ name = eventName.substr(1);\n      let /** @type {?} */ phase = '';\n      if (name.charAt(0) != '@') {  // transition-specific\n        [name, phase] = parseTriggerCallbackName(name);\n      }\n      return this._engine.listen(this._namespaceId, element, name, phase, (event: any) => {\n        this._zone.run(() => callback(event));\n      });\n    }\n    return this.delegate.listen(target, eventName, callback);\n  }\n/**\n * @return {?}\n */\nprivate _queueFlush() {\n    if (!this._flushPending) {\n      this._flushPending = true;\n      Zone.current.scheduleMicroTask('AnimationRenderer queue flush', () => {\n        this._flushPending = false;\n        this._engine.flush();\n      });\n    }\n  }\n}\n\nfunction AnimationRenderer_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationRenderer.prototype.destroyNode;\n/** @type {?} */\nAnimationRenderer.prototype._flushPending;\n/** @type {?} */\nAnimationRenderer.prototype.delegate;\n/** @type {?} */\nAnimationRenderer.prototype._engine;\n/** @type {?} */\nAnimationRenderer.prototype._zone;\n/** @type {?} */\nAnimationRenderer.prototype._namespaceId;\n}\n\n/**\n * @param {?} target\n * @return {?}\n */\nfunction resolveElementFromTarget(target: 'window' | 'document' | 'body' | any): any {\n  switch (target) {\n    case 'body':\n      return document.body;\n    case 'document':\n      return document;\n    case 'window':\n      return window;\n    default:\n      return target;\n  }\n}\n/**\n * @param {?} triggerName\n * @return {?}\n */\nfunction parseTriggerCallbackName(triggerName: string) {\n  const /** @type {?} */ dotIndex = triggerName.indexOf('.');\n  const /** @type {?} */ trigger = triggerName.substring(0, dotIndex);\n  const /** @type {?} */ phase = triggerName.substr(dotIndex + 1);\n  return [trigger, phase];\n}\n/**\n * @param {?} namespaceId\n * @param {?} value\n * @return {?}\n */\nfunction namespaceify(namespaceId: string, value: string): string {\n  return `${namespaceId}#${value}`;\n}\n/**\n * @param {?} namespaceId\n * @param {?} value\n * @return {?}\n */\nfunction deNamespaceify(namespaceId: string, value: string): string {\n  return value.replace(namespaceId + '#', '');\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {AnimationBuilder} from '@angular/animations';\nimport {AnimationDriver, ÉµAnimationEngine as AnimationEngine, ÉµAnimationStyleNormalizer as AnimationStyleNormalizer, ÉµDomAnimationEngine as DomAnimationEngine, ÉµNoopAnimationDriver as NoopAnimationDriver, ÉµNoopAnimationEngine as NoopAnimationEngine, ÉµWebAnimationsDriver as WebAnimationsDriver, ÉµWebAnimationsStyleNormalizer as WebAnimationsStyleNormalizer, ÉµsupportsWebAnimations as supportsWebAnimations} from '@angular/animations/browser';\nimport {Injectable, NgZone, Provider, RendererFactory2} from '@angular/core';\nimport {ÉµDomRendererFactory2 as DomRendererFactory2} from '@angular/platform-browser';\n\nimport {BrowserAnimationBuilder, NoopAnimationBuilder} from './animation_builder';\nimport {AnimationRendererFactory} from './animation_renderer';\nexport class InjectableAnimationEngine extends DomAnimationEngine {\n/**\n * @param {?} driver\n * @param {?} normalizer\n */\nconstructor(driver: AnimationDriver, normalizer: AnimationStyleNormalizer) {\n    super(driver, normalizer);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AnimationDriver, },\n{type: AnimationStyleNormalizer, },\n];\n}\n\nfunction InjectableAnimationEngine_tsickle_Closure_declarations() {\n/** @type {?} */\nInjectableAnimationEngine.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nInjectableAnimationEngine.ctorParameters;\n}\n\n/**\n * @return {?}\n */\nexport function instantiateSupportedAnimationDriver() {\n  if (supportsWebAnimations()) {\n    return new WebAnimationsDriver();\n  }\n  return new NoopAnimationDriver();\n}\n/**\n * @return {?}\n */\nexport function instantiateDefaultStyleNormalizer() {\n  return new WebAnimationsStyleNormalizer();\n}\n/**\n * @param {?} renderer\n * @param {?} engine\n * @param {?} zone\n * @return {?}\n */\nexport function instantiateRendererFactory(\n    renderer: DomRendererFactory2, engine: AnimationEngine, zone: NgZone) {\n  return new AnimationRendererFactory(renderer, engine, zone);\n}\n\n/**\n * Separate providers from the actual module so that we can do a local modification in Google3 to\n * include them in the BrowserModule.\n */\nexport const /** @type {?} */ BROWSER_ANIMATIONS_PROVIDERS: Provider[] = [\n  {provide: AnimationBuilder, useClass: BrowserAnimationBuilder},\n  {provide: AnimationDriver, useFactory: instantiateSupportedAnimationDriver},\n  {provide: AnimationStyleNormalizer, useFactory: instantiateDefaultStyleNormalizer},\n  {provide: AnimationEngine, useClass: InjectableAnimationEngine}, {\n    provide: RendererFactory2,\n    useFactory: instantiateRendererFactory,\n    deps: [DomRendererFactory2, AnimationEngine, NgZone]\n  }\n];\n\n/**\n * Separate providers from the actual module so that we can do a local modification in Google3 to\n * include them in the BrowserTestingModule.\n */\nexport const /** @type {?} */ BROWSER_NOOP_ANIMATIONS_PROVIDERS: Provider[] = [\n  {provide: AnimationBuilder, useClass: NoopAnimationBuilder},\n  {provide: AnimationEngine, useClass: NoopAnimationEngine}, {\n    provide: RendererFactory2,\n    useFactory: instantiateRendererFactory,\n    deps: [DomRendererFactory2, AnimationEngine, NgZone]\n  }\n];\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Animation, AnimationBuilder, AnimationMetadata, AnimationPlayer, NoopAnimationPlayer} from '@angular/animations';\nimport {Injectable, RendererFactory2, RendererType2} from '@angular/core';\n\nimport {AnimationRenderer} from './animation_renderer';\nexport class BrowserAnimationBuilder extends AnimationBuilder {\nprivate _nextAnimationId = 0;\nprivate _renderer: AnimationRenderer;\n/**\n * @param {?} rootRenderer\n */\nconstructor(rootRenderer: RendererFactory2) {\n    super();\n    const typeData = {\n      id: '0',\n      encapsulation: null,\n      styles: [],\n      data: {animation: []}\n    } as RendererType2;\n    this._renderer = rootRenderer.createRenderer(document.body, typeData) as AnimationRenderer;\n  }\n/**\n * @param {?} animation\n * @return {?}\n */\nbuild(animation: AnimationMetadata|AnimationMetadata): Animation {\n    const /** @type {?} */ id = this._nextAnimationId.toString();\n    this._nextAnimationId++;\n    issueAnimationCommand(this._renderer, null, id, 'register', [animation]);\n    return new BrowserAnimation(id, this._renderer);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: RendererFactory2, },\n];\n}\n\nfunction BrowserAnimationBuilder_tsickle_Closure_declarations() {\n/** @type {?} */\nBrowserAnimationBuilder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBrowserAnimationBuilder.ctorParameters;\n/** @type {?} */\nBrowserAnimationBuilder.prototype._nextAnimationId;\n/** @type {?} */\nBrowserAnimationBuilder.prototype._renderer;\n}\n\nexport class NoopAnimationBuilder extends BrowserAnimationBuilder {\nconstructor() { super(null); }\n/**\n * @param {?} animation\n * @return {?}\n */\nbuild(animation: AnimationMetadata|AnimationMetadata): Animation { return new NoopAnimation(); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NoopAnimationBuilder_tsickle_Closure_declarations() {\n/** @type {?} */\nNoopAnimationBuilder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNoopAnimationBuilder.ctorParameters;\n}\n\nexport class BrowserAnimation extends Animation {\n/**\n * @param {?} _id\n * @param {?} _renderer\n */\nconstructor(private _id: string,\nprivate _renderer: AnimationRenderer) { super(); }\n/**\n * @param {?} element\n * @param {?=} locals\n * @return {?}\n */\ncreate(element: any, locals: {[key: string]: string | number} = {}): AnimationPlayer {\n    return new RendererAnimationPlayer(this._id, element, locals, this._renderer);\n  }\n}\n\nfunction BrowserAnimation_tsickle_Closure_declarations() {\n/** @type {?} */\nBrowserAnimation.prototype._id;\n/** @type {?} */\nBrowserAnimation.prototype._renderer;\n}\n\nexport class NoopAnimation extends BrowserAnimation {\nconstructor() { super(null, null); }\n/**\n * @param {?} element\n * @param {?=} locals\n * @return {?}\n */\ncreate(element: any, locals: {[key: string]: string | number} = {}): AnimationPlayer {\n    return new NoopAnimationPlayer();\n  }\n}\nexport class RendererAnimationPlayer implements AnimationPlayer {\npublic parentPlayer: AnimationPlayer = null;\n/**\n * @param {?} id\n * @param {?} element\n * @param {?} locals\n * @param {?} _renderer\n */\nconstructor(\npublic id: string,\npublic element: any, locals: {[key: string]: string | number},\nprivate _renderer: AnimationRenderer) {\n    this._command('create', locals);\n  }\n/**\n * @param {?} eventName\n * @param {?} callback\n * @return {?}\n */\nprivate _listen(eventName: string, callback: (event: any) => any): () => void {\n    return this._renderer.listen(this.element, `@@${this.id}:${eventName}`, callback);\n  }\n/**\n * @param {?} command\n * @param {...?} args\n * @return {?}\n */\nprivate _command(command: string, ...args: any[]) {\n    return issueAnimationCommand(this._renderer, this.element, this.id, command, args);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nonDone(fn: () => void): void { this._listen('onDone', fn); }\n/**\n * @param {?} fn\n * @return {?}\n */\nonStart(fn: () => void): void { this._listen('onStart', fn); }\n/**\n * @param {?} fn\n * @return {?}\n */\nonDestroy(fn: () => void): void { this._listen('onDestroy', fn); }\n/**\n * @return {?}\n */\ninit(): void { this._command('init'); }\n/**\n * @return {?}\n */\nhasStarted(): boolean { return undefined; }\n/**\n * @return {?}\n */\nplay(): void { this._command('play'); }\n/**\n * @return {?}\n */\npause(): void { this._command('pause'); }\n/**\n * @return {?}\n */\nrestart(): void { this._command('restart'); }\n/**\n * @return {?}\n */\nfinish(): void { this._command('finish'); }\n/**\n * @return {?}\n */\ndestroy(): void { this._command('destroy'); }\n/**\n * @return {?}\n */\nreset(): void { this._command('reset'); }\n/**\n * @param {?} p\n * @return {?}\n */\nsetPosition(p: number): void { this._command('setPosition', p); }\n/**\n * @return {?}\n */\ngetPosition(): number { return 0; }\npublic totalTime = 0;\n}\n\nfunction RendererAnimationPlayer_tsickle_Closure_declarations() {\n/** @type {?} */\nRendererAnimationPlayer.prototype.parentPlayer;\n/** @type {?} */\nRendererAnimationPlayer.prototype.totalTime;\n/** @type {?} */\nRendererAnimationPlayer.prototype.id;\n/** @type {?} */\nRendererAnimationPlayer.prototype.element;\n/** @type {?} */\nRendererAnimationPlayer.prototype._renderer;\n}\n\n/**\n * @param {?} renderer\n * @param {?} element\n * @param {?} id\n * @param {?} command\n * @param {?} args\n * @return {?}\n */\nfunction issueAnimationCommand(\n    renderer: AnimationRenderer, element: any, id: string, command: string, args: any[]): any {\n  return renderer.setProperty(element, `@@${id}:${command}`, args);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\n\nimport {BROWSER_ANIMATIONS_PROVIDERS, BROWSER_NOOP_ANIMATIONS_PROVIDERS} from './providers';\n/**\n * \\@experimental Animation support is experimental.\n */\nexport class BrowserAnimationsModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [BrowserModule],\n  providers: BROWSER_ANIMATIONS_PROVIDERS,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BrowserAnimationsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nBrowserAnimationsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBrowserAnimationsModule.ctorParameters;\n}\n\n/**\n * \\@experimental Animation support is experimental.\n */\nexport class NoopAnimationsModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [BrowserModule],\n  providers: BROWSER_NOOP_ANIMATIONS_PROVIDERS,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NoopAnimationsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNoopAnimationsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNoopAnimationsModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["resolveElementFromTarget","target","instantiateSupportedAnimationDriver","BrowserAnimationBuilder","_super","rootRenderer","styles","__extends","this","_nextAnimationId","BrowserAnimation","id","_renderer","ctorParameters","type","_angular_core","RendererFactory2","NoopAnimationBuilder","prototype","build","animation","NoopAnimation","create","element","locals","args","RendererAnimationPlayer","onDone","fn","_listen","reset","_command","AnimationRendererFactory","delegate","_engine","_zone","createRenderer","hostElement","_this","data","componentId","AnimationRenderer","namespaceId","Injectable","_namespaceId","createComment","value","setProperty","el","name","charAt","listen","eventName","callback","substr","run","event","_a","_queueFlush","_flushPending","flush","call","driver","normalizer","InjectableAnimationEngine","_angular_animations_browser","ÉµAnimationStyleNormalizer","provide","ÉµAnimationEngine","useClass","BrowserAnimationsModule","decorators","NoopAnimationsModule"],"mappings":";;;;;q4BAuTA,QAAAA,0BAAAC,QACA,OAAAA,sEAKA,KAAA,wOClQA,QAAAC,ymBCrCAC,wBAAA,SAAAC,QAKA,QAAAD,yBAAAE,iHAKAC,sHAVAC,WAAAJ,wBAAAC,2GAgBA,OAnBAI,MAAAC,wFAmBA,GAAAC,kBAAAC,GAAAH,KAAAI,gJA+BAT,wBAAAU,eAAA,WAAA,QAAAC,KAAAC,cAAAC,gLAWAC,qBAAAC,UAAAC,MAAA,SAAAC,WAAA,MAAA,IAAAC,0YAeAX,iBAAAQ,UAAAI,OAAA,SAAAC,QAAAC,u5BAgEAC,gJAUAC,wBAAAR,UAAAS,OAAA,SAAAC,IAAApB,KAAAqB,QAAA,SAAAD,irBA2CAF,wBAAAR,UAAAY,MAAA,WAAAtB,KAAAuB,SAAA,sOFzLA,QAAAC,0BAAAC,SAAAC,QAAAC,2OAsBAH,0BAAAd,UAAAkB,eAAA,SAAAC,YAAAvB,MACA,GAAAwB,OAAA9B,4DARA,MAAA6B,aAAAvB,MAAAA,KAAAyB,MAAAzB,KAAAyB,KAAA,WAUA,MAAAN,SACA,IAAAO,aAAA1B,KAAAH,sGAPA,qJAAA,GAAA8B,mBAAAR,SAAAzB,KAAA0B,QAAA1B,KAAA2B,MAAAO,gFAkBA5B,KAAAC,cAAA4B,uTADGnC,KAsCH0B,QAtCAA,yBA2CA1B,KAAAoC,aAAAA,qhBAyBAH,kBAAAvB,UAAA2B,cAAA,SAAAC,OAAA,MAAAtC,MAAAyB,SAAAY,cAAAC,krDAkHAL,kBAAAvB,UAAA6B,YAAA,SAAAC,GAAAC,KAAAH,OACA,GAAA,KAAAG,KAAAC,OAAA,GAAA,sKAiBAT,kBAAAvB,UAAAiC,OAAA,SAAAlD,OAAAmD,UAAAC,UACA,GAAAf,OAAA9B,IACA,IAAA,KAAA4C,UAAAF,OAAA,GAAA,CACA,GAAA3B,SAAAvB,yBAAAC,QACAgD,KAAAG,UAAAE,OAAA,2KAKAhB,MAAAH,MAAAoB,IAAA,WAAA,MAAAF,UAAAG,iEAIA,IAAAC,KAIAhB,kBAAAvB,UAAAwC,YAAA,WAEA,GAAApB,OAAA9B,0HAmBA8B,MAAAqB,eAAA,EAAArB,MAAAJ,QAAA0B,kICpRA,MAAAxD,QAAAyD,KAAArD,KAAAsD,OAAAC,aAAAvD,WAAAD,WAAAyD,0BAAA5D,0QA6BAU,KAAAmD,4BAAAC,kWAqCAC,QAAAF,4BAAAG,iBAAAC,SAAAL,0oBEtEAM,wBAAA,gFAQAA,yBAAAC,4IAiBAD,wBAAAzD,eAAA,WAAA,SAEA,IAAA2D,sBAAA"}