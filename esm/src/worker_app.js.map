{"version":3,"file":"worker_app.js","sourceRoot":"","sources":["../../../../../modules/@angular/platform-browser/src/worker_app.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {APP_INITIALIZER, ApplicationModule, ExceptionHandler, NgModule, NgZone, OpaqueToken, PlatformRef, ReflectiveInjector, RootRenderer, assertPlatform, createPlatform, createPlatformFactory, getPlatform, platformCore} from '@angular/core';\n\nimport {BROWSER_SANITIZATION_PROVIDERS} from './browser';\nimport {isBlank, print} from './facade/lang';\nimport {ON_WEB_WORKER} from './web_workers/shared/api';\nimport {ClientMessageBrokerFactory, ClientMessageBrokerFactory_} from './web_workers/shared/client_message_broker';\nimport {MessageBus} from './web_workers/shared/message_bus';\nimport {PostMessageBus, PostMessageBusSink, PostMessageBusSource} from './web_workers/shared/post_message_bus';\nimport {RenderStore} from './web_workers/shared/render_store';\nimport {Serializer} from './web_workers/shared/serializer';\nimport {ServiceMessageBrokerFactory, ServiceMessageBrokerFactory_} from './web_workers/shared/service_message_broker';\nimport {WebWorkerRootRenderer} from './web_workers/worker/renderer';\nimport {WorkerDomAdapter} from './web_workers/worker/worker_adapter';\n\n/**\n * Logger for web workers.\n *\n * @experimental\n */\nexport class PrintLogger {\n  log = print;\n  logError = print;\n  logGroup = print;\n  logGroupEnd() {}\n}\n\n/**\n * @experimental\n */\nexport const platformWorkerApp = createPlatformFactory(platformCore, 'workerApp');\n\n/**\n * Exception handler factory function.\n *\n * @experimental\n */\nexport function exceptionHandler(): ExceptionHandler {\n  return new ExceptionHandler(new PrintLogger());\n}\n\n// TODO(jteplitz602) remove this and compile with lib.webworker.d.ts (#3492)\nlet _postMessage = {\n  postMessage: (message: any, transferrables?: [ArrayBuffer]) => {\n    (<any>postMessage)(message, transferrables);\n  }\n};\n\n/**\n * MessageBus factory function.\n *\n * @experimental\n */\nexport function createMessageBus(zone: NgZone): MessageBus {\n  let sink = new PostMessageBusSink(_postMessage);\n  let source = new PostMessageBusSource();\n  let bus = new PostMessageBus(sink, source);\n  bus.attachToZone(zone);\n  return bus;\n}\n\n/**\n * Application initializer for web workers.\n *\n * @experimental\n */\nexport function setupWebWorker(): void {\n  WorkerDomAdapter.makeCurrent();\n}\nexport class WorkerAppModule {\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [\n    BROWSER_SANITIZATION_PROVIDERS, Serializer,\n    {provide: ClientMessageBrokerFactory, useClass: ClientMessageBrokerFactory_},\n    {provide: ServiceMessageBrokerFactory, useClass: ServiceMessageBrokerFactory_},\n    WebWorkerRootRenderer, {provide: RootRenderer, useExisting: WebWorkerRootRenderer},\n    {provide: ON_WEB_WORKER, useValue: true}, RenderStore,\n    {provide: ExceptionHandler, useFactory: exceptionHandler, deps: []},\n    {provide: MessageBus, useFactory: createMessageBus, deps: [NgZone]},\n    {provide: APP_INITIALIZER, useValue: setupWebWorker, multi: true}\n  ],\n  exports: [CommonModule, ApplicationModule]\n}, ] },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}