{"version":3,"sources":["../../../../../../modules/@angular/platform-browser/src/dom/events/dom_events.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAA,MAAE,EAAO,UAAA,EAAW,MAAA,qBAAA,CAAA;AAE3B,OAAO,EAAA,QAAE,EAAQ,MAAA,eAAA,CAAA;AAEjB,OAAO,EAAA,kBAAE,EAAkB,MAAA,iBAAA,CAAA;AAC3B,MAEC,sBAAA,SAAA,kBAAA;IADD;;OAEG;IACH,YADe,GAAK,IAAI,KAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA;IAExB;;;OAGG;IACH,QAFG,CAAA,SAAA,IAAsC,MAAA,CAAO,IAAA,CAAK,CAAC,CAAA;IAGtD;;;;;OAKG;IACH,gBAPG,CAAA,OAAA,EAAA,SAAA,EAAA,OAAA;QAQC,OAAO,CAPC,gBAAC,CAAgB,SAAC,EAAS,gBAAA,CAAA,CAAC,OAAW,CAAA,EAAK,KAAA,CAAM,CAAC;QAQ3D,MAAM,CAPC,MAAM,OAAA,CAAQ,mBAAC,CAAmB,SAAC,EAAS,gBAAA,CAAA,CAAC,OAAW,CAAA,EAAK,KAAA,CAAM,CAAC;IAQ7E,CAAC;;AANI,0BAAA,GAAoC;IAQ3C,EAPE,IAAA,EAAM,UAAA,EAAW;CAQlB,CAPC;AAQF,kBAAkB;AANX,8BAAA,GAAiF,MAAM;IAQ9F,EAAC,IAPC,EAAK,SAAA,EAAW,UAAA,EAAY,CAAA,EAAG,IAAA,EAAM,MAAA,EAAQ,IAAA,EAAM,CAAA,QAAE,EAAQ,EAAG,EAAE,EAAG;CAQtE,CAPC;AAUF;IACA,gBAAgB;IAChB,eAAe,CAAC,UAAU,CAAC;IAC3B;;;OAGG;IACH,eAAe,CAAC,cAAc,CAAC;AAC/B,CAAC","file":"dom_events.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable} from '@angular/core/index';\n\nimport {DOCUMENT} from '../dom_tokens';\n\nimport {EventManagerPlugin} from './event_manager';\nexport class DomEventsPlugin extends EventManagerPlugin {\n/**\n * @param {?} doc\n */\nconstructor( doc: any) { super(doc); }\n/**\n * @param {?} eventName\n * @return {?}\n */\nsupports(eventName: string): boolean { return true; }\n/**\n * @param {?} element\n * @param {?} eventName\n * @param {?} handler\n * @return {?}\n */\naddEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    element.addEventListener(eventName, /** @type {?} */(( handler as any)), false);\n    return () => element.removeEventListener(eventName, /** @type {?} */(( handler as any)), false);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [DOCUMENT, ] }, ]},\n];\n}\n\nfunction DomEventsPlugin_tsickle_Closure_declarations() {\n/** @type {?} */\nDomEventsPlugin.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDomEventsPlugin.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}