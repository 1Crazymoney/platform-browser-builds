{"version":3,"sources":["../../../../../../modules/@angular/platform-browser/src/dom/debug/ng_probe.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,KAAK,IAAA,MAAA,qBAAA;OAEL,EAAA,gBAAE,EAAgB,MAAA,yBAAA;OAClB,EAAA,oBAAE,EAAoB,MAAA,2BAAA;OACtB,EAAA,MAAE,EAAM,MAAA,gBAAA;OACR,EAAA,eAAE,EAAe,MAAA,iBAAA;AAExB,MAAM,gBAAgB,CAAhB,WAAA,GAAc;IAClB,gBAAgB,EAAE,IAAA,CAAK,cAAC;IACxB,QAAQ,EAAE,IAAA,CAAK,MAAC;CACjB,CAAC;AAEF,MAAM,gBAAgB,CAAhB,mBAAA,GAAsB,UAAA,CAAW;AACvC,MAAM,gBAAgB,CAAhB,uBAAA,GAA0B,eAAA,CAAgB;AAChD;;;;;;GAMG;AACH,qCADC,OAAA;IAEC,MAAM,CADC,IAAA,CAAK,YAAC,CAAY,OAAC,CAAO,CAAC;AAEpC,CAAC;AACD;;;GAGG;AACH;IACA;;;OAGG;IACH,YAJqB,IAAM,EAAe,KAAO;QAA5B,SAAA,GAAA,IAAA,CAAM;QAAe,UAAA,GAAA,KAAA,CAAO;IAAI,CAAA;AAMrD,CAAC;AAED;IACA,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC;IAC5B,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,KAAK,CAAC;AAC7B,CAAC;AAED;;;;;GAKG;AACH,+CACI,YAAiB,EAAE,WAA2B,EAAE,UAA+B;IACjF,MAAM,CAjBC,IAAA,CAAK,SAAC,EAAS;QAkBlB,mBAAmB,CAjBC,YAAC,EAAa,CAAA,WAAE,IAAc,EAAA,CAAG,CAAC,MAAC,CAAM,UAAC,IAAa,EAAA,CAAG,CAAC;QAkB/E,YAAY,CAjBC;AAkBnB,CAAC;AACD;;;;GAIG;AACH,6BArBC,YAAA,EAAA,WAAA;IAsBC,MAAM,EArBC,CAAE,YAAC,CAAY,mBAAC,EAAoB,oBAAA,CAAqB,CAAC;IAsBjE,MAAM,EArBC,CAAE,YAAC,CAsBN,uBAAuB,EACvB,gBAAgB,CArBC,KAAC,CAAK,WAAC,EAAY,mBAAA,CAAoB,WAAC,IAAc,EAAA,CAAG,CAAC,CAAC,CAAC;IAsBjF,MAAM,CArBC,IAAI,oBAAA,CAAqB,YAAC,CAAY,CAAC;AAsBhD,CAAC;AACD;;;GAGG;AACH,6BAxBC,MAAA;IAyBC,MAAM,CAxBC,MAAA,CAAO,MAAC,CAAM,CAAC,IAAM,EAAK,CAAG,KAAQ,CAAA,IAAE,CAAI,CAAC,CAAC,IAAC,CAAI,GAAG,CAAA,CAAE,KAAC,EAAM,IAAA,CAAK,EAAE,EAAA,CAAG,CAAC;AAyBlF,CAAC;AAED;;GAEG;AACH,OAxBO,MAAA,gBAAA,CAAM,uBAAA,GAA2C,CAAA;QAyBtD,OAAO,EAxBE,IAAA,CAAK,YAAC;QAyBf,UAAU,EAxBE,8BAAA;QAyBZ,IAAI,EAxBE;YAyBJ,eAAe,EAxBE,CAAA,YAAE,EAAa,IAAI,IAAA,CAAK,QAAC,EAAQ,CAAE;YAyBpD,CAAC,IAxBC,CAAI,YAAC,EAAa,IAAI,IAAA,CAAK,QAAC,EAAQ,CAAE;SAyBzC;KACF,CAxBC,CAAC","file":"ng_probe.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as core from '@angular/core/index';\n\nimport {StringMapWrapper} from '../../facade/collection';\nimport {DebugDomRootRenderer} from '../../private_import_core';\nimport {getDOM} from '../dom_adapter';\nimport {DomRootRenderer} from '../dom_renderer';\n\nconst /** @type {?} */ CORE_TOKENS = {\n  'ApplicationRef': core.ApplicationRef,\n  'NgZone': core.NgZone,\n};\n\nconst /** @type {?} */ INSPECT_GLOBAL_NAME = 'ng.probe';\nconst /** @type {?} */ CORE_TOKENS_GLOBAL_NAME = 'ng.coreTokens';\n/**\n * Returns a {\\@link DebugElement} for the given native DOM element, or\n * null if the given native element does not have an Angular view associated\n * with it.\n * @param {?} element\n * @return {?}\n */\nexport function inspectNativeElement(element: any): core.DebugNode {\n  return core.getDebugNode(element);\n}\n/**\n * Deprecated. Use the one from '\\@angular/core'.\n * @deprecated\n */\nexport class NgProbeToken {\n/**\n * @param {?} name\n * @param {?} token\n */\nconstructor(public name: string,\npublic token: any) {}\n}\n\nfunction NgProbeToken_tsickle_Closure_declarations() {\n/** @type {?} */\nNgProbeToken.prototype.name;\n/** @type {?} */\nNgProbeToken.prototype.token;\n}\n\n/**\n * @param {?} rootRenderer\n * @param {?} extraTokens\n * @param {?} coreTokens\n * @return {?}\n */\nexport function _createConditionalRootRenderer(\n    rootRenderer: any, extraTokens: NgProbeToken[], coreTokens: core.NgProbeToken[]) {\n  return core.isDevMode() ?\n      _createRootRenderer(rootRenderer, (extraTokens || []).concat(coreTokens || [])) :\n      rootRenderer;\n}\n/**\n * @param {?} rootRenderer\n * @param {?} extraTokens\n * @return {?}\n */\nfunction _createRootRenderer(rootRenderer: any, extraTokens: NgProbeToken[]) {\n  getDOM().setGlobalVar(INSPECT_GLOBAL_NAME, inspectNativeElement);\n  getDOM().setGlobalVar(\n      CORE_TOKENS_GLOBAL_NAME,\n      StringMapWrapper.merge(CORE_TOKENS, _ngProbeTokensToMap(extraTokens || [])));\n  return new DebugDomRootRenderer(rootRenderer);\n}\n/**\n * @param {?} tokens\n * @return {?}\n */\nfunction _ngProbeTokensToMap(tokens: NgProbeToken[]): {[name: string]: any} {\n  return tokens.reduce((prev: any, t: any) => (prev[t.name] = t.token, prev), {});\n}\n\n/**\n * Providers which support debugging Angular applications (e.g. via `ng.probe`).\n */\nexport const /** @type {?} */ ELEMENT_PROBE_PROVIDERS: core.Provider[] = [{\n  provide: core.RootRenderer,\n  useFactory: _createConditionalRootRenderer,\n  deps: [\n    DomRootRenderer, [NgProbeToken, new core.Optional()],\n    [core.NgProbeToken, new core.Optional()]\n  ]\n}];"]}